(1) 这个list和C++ STL的list有哪些不同？

这个list是单向链表，而C++ STL的list是双向链表。

C++ STL中list<T>的一个实例保存了链表中的所有元素，而这个list<T>的实例中只保存了指向其中一个元素(head)的指针，其余部分以tail指针的方式实现，tail指向list<T>类型。

(2) String table的意义是什么？

它的意义在于把出现多次的标识符、数值常量和字符串常量只保存一份。



# MP1.3

可以编译通过，没有移进-规约冲突。

关于优先级和结合性：

除了文档描述的以外，单目运算符使用了`%precedence`，因为按照语法他们必然是右结合。

`IN`关键字比较特殊，在let语句中，如果不加优先级，是右二义性的：`let a in 1+2`可以解释为`(let a in 1)+2`和`let a in (1+2)`。按照文档，应该取尽量长的，所以设置`IN`的优先级比其他所有运算符都高即可解决这个问题。

赋值运算符左边必须是ID，所以`a<-b<-c`只能解释为`a<-(b<-c)`，否则`(a<-b)<-c`的`a<-b`不是ID，不强调结合性也不会有冲突产生。

要求可以为空的list使用额外一个`list_nonempty`非终结符实现：

list : 空串 | list_nonempty

list_nonempty : expr | list_nonempty , expr

增加一个`no_expr`终结符保证let语句中的`no_expr()`的行号是正确的，否则在let语句的action中`no_expr()`将会默认使用let语句的最后一行的行号。

错误处理已经完成，测试样例在`bison_test_bad.cl`中。测试`bison_test_bad.cl`的时候，由于parser只能输出前21个错误，所以测试后面的错误应该先把前面的注释掉。

错误处理可以做到基本要求，并且在基本要求之上可以处理很多其他错误。

class定义中遇到错误，这个类定义可以被正确终止，并且能够继续解析下一个类定义。parser也能从feature、let语句、`{...}`中的表达式中发生的错误中恢复，并跳到下一个对应层次的语法结构继续解析。

`bison_test_bad.cl`中列举了各种错误的例子，由于错误的原因很容易看出，在此就不一一描述每个错误了。

下面说一下测试结果中我的程序和`reference binary`不同的地方：

61行feature名称大写后下一个错误是65行formal名称大写。`reference binary`不知为何一路read并且discard所有token直到下一个class，而不处理其他feature。我的实现可以正确处理。

118行`if 1 then else 1 fi`中`then`和`else`之间为空，`reference binary`因上一个函数（f9）的错误没有恢复过来而使得新错误未报错。我的实现没有问题。

134行`while 1 pool 1 pool`中，到第一个`pool`时就已经有问题了，我的程序在`pool`这个token报错，而`reference binary`不知为何在常数1处报错。

